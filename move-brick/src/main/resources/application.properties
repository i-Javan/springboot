#端口
#server.port=8081

#配置数据源(可以自动识别)
#spring.datasource.driver-class-name =com.mysql.jdbc.Driver


#默认数据源
spring.datasource.url=jdbc:mysql://67.218.135.5:3306/info20190108?useUnicode=true&characterEncoding=utf-8
spring.datasource.username =root
spring.datasource.password =root
#spring.datasource.type =com.alibaba.druid.pool.DruidDataSource


#数据源1
jdbc.driverClassName = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://67.218.135.5:3306/info20190108?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8
jdbc.username = root
jdbc.password = root

#数据源2
jdbc2.driverClassName = com.mysql.jdbc.Driver
jdbc2.url = jdbc:mysql://172.16.88.49:3306/spider?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8
jdbc2.username = dev
jdbc2.password = bigdata



#配置项：开启下划线到驼峰的自动转换. 作用：将数据库字段根据驼峰规则自动注入到对象属性。
mybatis.configuration.map-underscore-to-camel-case = true

#自定义启动banner文件的路径
spring.banner.location=banner.txt

#通过触发器，去控制什么时候进行热加载部署新的文件
spring.devtools.restart.trigger-file=trigger.txt

#指定某些文件不进行监听，即不会进行热加载
#spring.devtools.restart.exclude=application.properties

#文件上传地址
web.upload-path=/Users/jack/Desktop

#指定添加可以访问的静态文件夹
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,classpath:/test/,file:${web.upload-path}


#mybatis 

#增加打印sql语句，一般用于本地开发测试
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#mybatis-plus
#mybatis-plus.mapper-locations=classpath:com/mht/springbootmybatisplus/mapper/xml/*.xml
#mybatis-plus.type-aliases-package=com.movebrick.module.bean


# Logger Config
logging.level.com.baomidou.mybatisplus.samples.quickstart: debug
    






#spring:
#  messages:
#    basename: i18n/Messages,i18n/Pages
#  jms:
#    pub-sub-domain: false   # 配置消息的类型，如果是true则表示为topic消息，如果为false表示Queue消息
#  activemq:
#    user: studyjava    # 连接用户名
#    password: hello   # 连接密码
#    broker-url: tcp://activemq-server:61616 # 消息组件的连接主机信息


#-----------------------------------------ActiveMQ配置------------------------------------------------------------------------

#activemq地址
#spring.activemq.broker-url=tcp://127.0.0.1:61616
spring.activemq.broker-url=tcp://39.105.15.21:61616
#spring.activemq.broker-url=tcp://172.16.88.49:61616
#启动命令 activemq start xbean:file:../examples/conf/activemq-demo.xml
# 在考虑结束之前等待的时间
#spring.activemq.close-timeout=15s
# 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。
spring.activemq.in-memory=true 
# 是否在回滚回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。
spring.activemq.non-blocking-redelivery=false
# 等待消息发送响应的时间。设置为0等待永远。
spring.activemq.send-timeout=0
#默认情况下activemq提供的是queue模式，若要使用topic模式需要配置下面配置 ,
#使用queue模式的时候，需要把application.properties文件中的
#spring.jms.pub-sub-domain=true
#账号
spring.activemq.user=admin
# 密码
spring.activemq.password=admin
# 是否信任所有包
#spring.activemq.packages.trust-all=
# 要信任的特定包的逗号分隔列表（当不信任所有包时）
#spring.activemq.packages.trusted=
# 当连接请求和池满时是否阻塞。设置false会抛“JMSException异常”。
#spring.activemq.pool.block-if-full=true
# 如果池仍然满，则在抛出异常前阻塞时间。
#spring.activemq.pool.block-if-full-timeout=-1ms
# 是否在启动时创建连接。可以在启动时用于加热池。
#spring.activemq.pool.create-connection-on-startup=true
# 是否用Pooledconnectionfactory代替普通的ConnectionFactory。
#spring.activemq.pool.enabled=false
# 连接过期超时。
#spring.activemq.pool.expiry-timeout=0ms
# 连接空闲超时
#spring.activemq.pool.idle-timeout=30s
# 连接池最大连接数
#spring.activemq.pool.max-connections=1
# 每个连接的有效会话的最大数目。
#spring.activemq.pool.maximum-active-session-per-connection=500
# 当有"JMSException"时尝试重新连接
#spring.activemq.pool.reconnect-on-exception=true
# 在空闲连接清除线程之间运行的时间。当为负数时，没有空闲连接驱逐线程运行。
#spring.activemq.pool.time-between-expiration-check=-1ms
# 是否只使用一个MessageProducer
#spring.activemq.pool.use-anonymous-producers=true



#-----------------------------------------Zookeeper配置------------------------------------------------------------------------
#zookeeper.server=10.93.21.21:2181,10.93.18.34:2181,10.93.18.35:2181
#zookeeper.sessionTimeoutMs=6000
#zookeeper.connectionTimeoutMs=6000
#zookeeper.maxRetries=3
#zookeeper.baseSleepTimeMs=1000

